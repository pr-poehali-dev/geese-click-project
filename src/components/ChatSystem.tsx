import React, { useState, useEffect } from "react";
import { GooseState } from "@/pages/Index";

interface ChatSystemProps {
  isOpen: boolean;
  onClose: () => void;
  gooseState: GooseState;
  onResponse: (type: "kind" | "mean" | "neutral") => void;
}

interface Message {
  id: string;
  text: string;
  sender: "goose" | "player";
  timestamp: Date;
}

const ChatSystem: React.FC<ChatSystemProps> = ({
  isOpen,
  onClose,
  gooseState,
  onResponse,
}) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [showResponseOptions, setShowResponseOptions] = useState(false);

  const gooseMessages = {
    happy: [
      "–ì–∞-–≥–∞! –ö–∞–∫ –¥–µ–ª–∞, —Ö–æ–∑—è–∏–Ω? üòä",
      "–°–ø–∞—Å–∏–±–æ –∑–∞ –º–æ—Ä–∫–æ–≤–∫—É! –¢—ã –ª—É—á—à–∏–π! ü•ï",
      "–Ø —Ç–∞–∫ —Ä–∞–¥ —á—Ç–æ –º—ã –¥—Ä—É–∑—å—è! –ì–∞-–≥–∞-–≥–∞!",
      "–•–æ—á–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å —Å–æ –º–Ω–æ–π? üéÆ",
    ],
    angry: [
      "–ì–ê-–ì–ê-–ì–ê! –Ø –æ—á–µ–Ω—å –∑–ª–æ–π! üò†",
      "–ü–æ—á–µ–º—É —Ç—ã –º–µ–Ω—è –Ω–µ –∫–æ—Ä–º–∏—à—å?!",
      "–Ø —Ç–µ–±—è —Å—ä–µ–º –µ—Å–ª–∏ –±—É–¥–µ—à—å —Ç–∞–∫ –ø–ª–æ—Ö–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è!",
      "–ì–ê! –¢—ã —É–∂–∞—Å–Ω—ã–π —Ö–æ–∑—è–∏–Ω!",
    ],
    hungry: [
      "–•–æ–∑—è–∏–Ω... —è —Ç–∞–∫ –≥–æ–ª–æ–¥–µ–Ω... ü§§",
      "–ú–æ–∂–µ—à—å –¥–∞—Ç—å –º–Ω–µ –º–æ—Ä–∫–æ–≤–∫—É? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞?",
      "–£ –º–µ–Ω—è —É—Ä—á–∏—Ç –≤ –∂–∏–≤–æ—Ç–µ... –≥–∞-–≥–∞...",
      "–Ø –Ω–µ –µ–ª —É–∂–µ —Ü–µ–ª—É—é –≤–µ—á–Ω–æ—Å—Ç—å!",
    ],
    neutral: [
      "–ü—Ä–∏–≤–µ—Ç, —Ö–æ–∑—è–∏–Ω! –ö–∞–∫ –¥–µ–ª–∞? üëã",
      "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ? –ì–∞-–≥–∞!",
      "–°–∫—É—á–Ω–æ... –†–∞–∑–≤–ª–µ–∫–∏ –º–µ–Ω—è!",
      "–ü–æ–≥–æ–≤–æ—Ä–∏–º? üí¨",
    ],
  };

  const responseOptions = {
    kind: [
      "–ü—Ä–∏–≤–µ—Ç, –º–∏–ª—ã–π –≥—É—Å—å! üòä",
      "–ö–æ–Ω–µ—á–Ω–æ, —è –ø—Ä–∏–Ω–µ—Å—É —Ç–µ–±–µ –º–æ—Ä–∫–æ–≤–∫—É! ü•ï",
      "–¢—ã —Ç–∞–∫–æ–π —Ö–æ—Ä–æ—à–∏–π –≥—É—Å—å! üíï",
      "–î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º –≤–º–µ—Å—Ç–µ! üéÆ",
    ],
    mean: [
      "–û—Ç—Å—Ç–∞–Ω—å –æ—Ç –º–µ–Ω—è! üò§",
      "–°–∞–º –Ω–∞–π–¥–∏ —Å–µ–±–µ –µ–¥—É! üôÑ",
      "–¢—ã –Ω–∞–¥–æ–µ–¥–ª–∏–≤—ã–π –≥—É—Å—å! üò†",
      "–ó–∞—Ç–∫–Ω–∏—Å—å –∏ –Ω–µ –º–µ—à–∞–π! ü§ê",
    ],
    neutral: [
      "–õ–∞–¥–Ω–æ, —Ö–æ—Ä–æ—à–æ... üòê",
      "–ú–æ–∂–µ—Ç –±—ã—Ç—å... ü§î",
      "–ü–æ—Å–º–æ—Ç—Ä–∏–º... ‚è∞",
      "–Ø –ø–æ–¥—É–º–∞—é –æ–± —ç—Ç–æ–º üí≠",
    ],
  };

  // Add goose message when chat opens or mood changes
  useEffect(() => {
    if (isOpen && messages.length === 0) {
      addGooseMessage();
    }
  }, [isOpen]);

  useEffect(() => {
    if (isOpen && messages.length > 0) {
      // Random chance for goose to speak
      const timer = setTimeout(
        () => {
          if (Math.random() < 0.4) {
            addGooseMessage();
          }
        },
        3000 + Math.random() * 5000,
      );

      return () => clearTimeout(timer);
    }
  }, [messages, gooseState.mood, isOpen]);

  const addGooseMessage = () => {
    const moodMessages = gooseMessages[gooseState.mood];
    const randomMessage =
      moodMessages[Math.floor(Math.random() * moodMessages.length)];

    const newMessage: Message = {
      id: Date.now().toString(),
      text: randomMessage,
      sender: "goose",
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, newMessage]);
    setShowResponseOptions(true);
  };

  const handleResponse = (type: "kind" | "mean" | "neutral") => {
    const responses = responseOptions[type];
    const randomResponse =
      responses[Math.floor(Math.random() * responses.length)];

    const playerMessage: Message = {
      id: Date.now().toString(),
      text: randomResponse,
      sender: "player",
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, playerMessage]);
    setShowResponseOptions(false);
    onResponse(type);

    // Goose responds after player
    setTimeout(
      () => {
        addGooseMessage();
      },
      1000 + Math.random() * 2000,
    );
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
      <div className="bg-gray-900 border-2 border-cyan-400 rounded-lg w-96 h-96 flex flex-col">
        {/* Header */}
        <div className="p-3 border-b border-cyan-400 flex justify-between items-center">
          <h3 className="pixel-font text-cyan-400">üí¨ –ß–∞—Ç —Å –ì–æ—à–µ–π</h3>
          <button
            onClick={onClose}
            className="text-red-400 hover:text-red-300 text-xl"
          >
            ‚úï
          </button>
        </div>

        {/* Messages */}
        <div className="flex-1 p-3 overflow-y-auto space-y-2">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`p-2 rounded max-w-xs ${
                message.sender === "goose"
                  ? "bg-blue-600 self-start text-white"
                  : "bg-green-600 self-end text-white ml-auto"
              }`}
            >
              <div className="text-sm">
                {message.sender === "goose" ? "ü¶¢ –ì–æ—à–∞" : "üë§ –í—ã"}
              </div>
              <div>{message.text}</div>
            </div>
          ))}
        </div>

        {/* Response options */}
        {showResponseOptions && (
          <div className="p-3 border-t border-cyan-400 space-y-2">
            <div className="text-sm text-gray-400 pixel-font">
              –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:
            </div>
            <div className="flex flex-col space-y-1">
              <button
                onClick={() => handleResponse("kind")}
                className="px-3 py-1 bg-green-600 hover:bg-green-500 text-white rounded text-sm text-left"
              >
                üòä –î–æ–±—Ä—ã–π –æ—Ç–≤–µ—Ç
              </button>
              <button
                onClick={() => handleResponse("neutral")}
                className="px-3 py-1 bg-gray-600 hover:bg-gray-500 text-white rounded text-sm text-left"
              >
                üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
              </button>
              <button
                onClick={() => handleResponse("mean")}
                className="px-3 py-1 bg-red-600 hover:bg-red-500 text-white rounded text-sm text-left"
              >
                üò† –ó–ª–æ–π –æ—Ç–≤–µ—Ç (+–∑–ª–æ—Å—Ç—å)
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ChatSystem;
