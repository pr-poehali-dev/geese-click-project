import React, { useState, useEffect } from "react";
import { GooseState } from "@/pages/Index";

interface GooseCharacterProps {
  gooseState: GooseState;
}

const GooseCharacter: React.FC<GooseCharacterProps> = ({ gooseState }) => {
  const [currentAnimation, setCurrentAnimation] = useState<
    "idle" | "happy" | "angry" | "eating"
  >("idle");
  const [speechBubble, setSpeechBubble] = useState<string>("");

  const getGooseEmoji = () => {
    switch (gooseState.mood) {
      case "happy":
        return "ü¶¢";
      case "angry":
        return "ü¶Ü";
      case "hungry":
        return "ü¶Ü";
      default:
        return "ü¶¢";
    }
  };

  const getRandomMessage = () => {
    const messages = {
      happy: [
        "–ì–∞-–≥–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –º–æ—Ä–∫–æ–≤–∫—É! ü•ï",
        "–Ø —Ç–∞–∫–æ–π —Å—á–∞—Å—Ç–ª–∏–≤—ã–π –≥—É—Å—å! üòä",
        "–¢—ã –ª—É—á—à–∏–π —Ö–æ–∑—è–∏–Ω! –ì–∞-–≥–∞-–≥–∞!",
        "–ú–æ—Ä–∫–æ–≤–∫–∞ –º–æ—è –ª—é–±–∏–º–∞—è –µ–¥–∞! üíï",
      ],
      angry: [
        "–ì–ê-–ì–ê-–ì–ê! –Ø –∑–ª–æ–π! üò†",
        "–ì–¥–µ –º–æ—è –º–æ—Ä–∫–æ–≤–∫–∞?! –ì–ê!",
        "–¢—ã –ø–ª–æ—Ö–æ–π —Ö–æ–∑—è–∏–Ω! –ì–ê-–ì–ê!",
        "–Ø —Ç–µ–±—è —Å—ä–µ–º –µ—Å–ª–∏ –Ω–µ –ø–æ–∫–æ—Ä–º–∏—à—å! üëπ",
      ],
      hungry: [
        "–ì–∞-–≥–∞... –Ø –≥–æ–ª–æ–¥–Ω—ã–π... ü§§",
        "–ú–æ–∂–Ω–æ –º–æ—Ä–∫–æ–≤–∫—É? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞? ü•ï",
        "–£ –º–µ–Ω—è —É—Ä—á–∏—Ç –≤ –∂–∏–≤–æ—Ç–µ... –≥–∞...",
        "–ü–æ–∫–æ—Ä–º–∏ –º–µ–Ω—è, —Ö–æ–∑—è–∏–Ω!",
      ],
      neutral: [
        "–ì–∞-–≥–∞! –ü—Ä–∏–≤–µ—Ç, —Ö–æ–∑—è–∏–Ω!",
        "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? –ì–∞!",
        "–Ø –ø—Ä–æ—Å—Ç–æ –≥—É—Å—å... –≥–∞-–≥–∞...",
        "–•–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å? üí¨",
      ],
    };

    const moodMessages = messages[gooseState.mood];
    return moodMessages[Math.floor(Math.random() * moodMessages.length)];
  };

  // Random speech bubbles
  useEffect(() => {
    const interval = setInterval(() => {
      if (Math.random() < 0.3) {
        // 30% chance
        setSpeechBubble(getRandomMessage());
        setTimeout(() => setSpeechBubble(""), 3000);
      }
    }, 5000);

    return () => clearInterval(interval);
  }, [gooseState.mood]);

  // Animation based on mood
  useEffect(() => {
    setCurrentAnimation(
      gooseState.mood === "happy"
        ? "happy"
        : gooseState.mood === "angry"
          ? "angry"
          : "idle",
    );
  }, [gooseState.mood]);

  const getAnimationClass = () => {
    switch (currentAnimation) {
      case "happy":
        return "animate-bounce";
      case "angry":
        return "animate-pulse";
      case "eating":
        return "animate-ping";
      default:
        return "";
    }
  };

  return (
    <div className="relative flex flex-col items-center">
      {/* Speech bubble */}
      {speechBubble && (
        <div className="absolute -top-16 left-1/2 transform -translate-x-1/2 bg-white/90 p-2 rounded-lg border-2 border-gray-300 max-w-xs text-center text-sm text-black z-10">
          {speechBubble}
          <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 translate-y-full w-0 h-0 border-l-4 border-r-4 border-t-4 border-l-transparent border-r-transparent border-t-white/90"></div>
        </div>
      )}

      {/* Goose character */}
      <div
        className={`text-8xl cursor-pointer hover:scale-110 transition-all duration-300 ${getAnimationClass()}`}
        onClick={() => {
          setSpeechBubble(getRandomMessage());
          setTimeout(() => setSpeechBubble(""), 2000);
        }}
      >
        {getGooseEmoji()}
      </div>

      {/* Status indicators */}
      <div className="flex space-x-2 mt-2">
        {gooseState.hunger > 70 && <span className="text-red-400">üçΩÔ∏è</span>}
        {gooseState.happiness > 80 && (
          <span className="text-yellow-400">‚ú®</span>
        )}
        {gooseState.anger > 50 && <span className="text-red-600">üí¢</span>}
      </div>

      {/* Name tag */}
      <div className="pixel-font text-white text-lg mt-2 bg-black/50 px-2 py-1 rounded">
        –ì—É—Å—å –ì–æ—à–∞
      </div>
    </div>
  );
};

export default GooseCharacter;
